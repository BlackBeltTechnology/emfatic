<%@ jet package="translated" class="ExtentSetIterator" %>

// (C) Copyright Darren Willis, David James Pearce and James Noble 2005. 
// Permission to copy, use, modify, sell and distribute this software 
// is granted provided this copyright notice appears in all copies. 
// This software is provided "as is" without express or implied 
// warranty, and with no claim as to its suitability for any purpose.
//
// Email: david.pearce@mcs.vuw.ac.nz

package jql.tracker;

import java.util.Iterator;

public class ExtentSetIterator extends InterfaceIterator {
	
	ExtentSet target;
	Iterator<Object> hashIt;
	boolean inHash = true;
	
	public ExtentSetIterator(ExtentSet caller){
		super(caller);
		target=caller;
		subordinateIt = target.subordinateStores.iterator();
		hashIt = target.objectreferences.keySet().iterator();
	}
	
	public boolean hasNext() {
		if(inHash){
			if(hashIt.hasNext()){
				return true;
			}else{
				inHash=false;   // We've been through the main hash
				if(subordinateIt.hasNext())
					current = (InterfaceExtent)subordinateIt.next(); // So we set our current iterator to be the first substore
				else
					return false;
				currentIt = current.iterator();
			}
		}
		if(currentIt == null)
			return false;
		while(!(currentIt.hasNext())){
			if(subordinateIt.hasNext()){
				current = (InterfaceExtent)subordinateIt.next();
				currentIt = current.iterator();
			}else{
				break;
			}
		}
		return currentIt.hasNext();  // We can get here by either finding a currentIt with nexts, or by running out of options
	}

	public Object next() {
		if(inHash){
			if(hashIt.hasNext()){
				currentElement = hashIt.next();
				return currentElement;
			}else{
				inHash = false;
				if(subordinateIt.hasNext())
					current = (InterfaceExtent)subordinateIt.next();
				if(current == null)
					return null; 
				currentIt = current.iterator();
			}
		}
		if(currentIt==null)
			return null;
		while(!(currentIt.hasNext())){
			if(subordinateIt.hasNext()){
				current = (InterfaceExtent)subordinateIt.next();
				currentIt = current.iterator();
			}else{
				break;
			}
		}
		currentElement = currentIt.next();
		return currentElement;
	}

	public void remove() {
		// TODO Auto-generated method stub
	}

	public void backToStart(){
		inHash = true;
		subordinateIt = target.subordinateStores.iterator();
		hashIt = target.objectreferences.keySet().iterator();
		current = null;
		currentIt = null;
		currentElement = null;
	}	
}