<%@ jet package="translated" class="ExtentSets" %>

// (C) Copyright Darren Willis, David James Pearce and James Noble 2005. 
// Permission to copy, use, modify, sell and distribute this software 
// is granted provided this copyright notice appears in all copies. 
// This software is provided "as is" without express or implied 
// warranty, and with no claim as to its suitability for any purpose.
//
// Email: david.pearce@mcs.vuw.ac.nz

package jql.tracker;

import java.util.ArrayList;
import java.util.Collection;
import java.util.WeakHashMap;

/*
 * ExtentSet
 * A store for object references; similar to InterfaceExtent except it actually stores things.
 * These are kept in a WeakHashMap.
 */

public class ExtentSet extends InterfaceExtent {
	public ArrayList<InterfaceExtent> subordinateStores = new ArrayList<InterfaceExtent>();
	public WeakHashMap<Object,Object> objectreferences = new WeakHashMap<Object,Object>();
 
	public ExtentSet(String name){
		super(name);
	}
	
	public ExtentSet(){
		super();
	}
	
	
	public ExtentSetIterator iterator(){
		return new ExtentSetIterator(this);
	}
	
	public int size(){
		int size=0;
		for(InterfaceExtent s : subordinateStores){
			size+=s.size();
		}
		size+=objectreferences.size();
		return size;
	}
	
	public ArrayList<Object> getAll(){
		ArrayList<Object> refs = new ArrayList<Object>();
		for(InterfaceExtent c : subordinateStores){
			refs.addAll(c.getAll());
		}
		refs.addAll(objectreferences.keySet());
		return refs;
	}
	
	
	public boolean add(Object r){
		objectreferences.put(r,null);
		return true;
	}
	
	public boolean remove(Object r){
		objectreferences.remove(r);
		return true;
	}

	public String toString(){
			return "Subordinates " + subordinateStores.size() + " Refs " + objectreferences.size();
	}
	
	public boolean contains(Object f){
		if(objectreferences.containsKey(f)){
			return true;
		}
		for(InterfaceExtent i : subordinateStores){
			if(i.contains(f))
				return true;
		}
		return false;
	}
	
	public boolean isEmpty(){
		if(!objectreferences.isEmpty())
			return false;
		for(InterfaceExtent i : subordinateStores){
			if(!i.isEmpty())
				return false;
		}
		return true;
	}
	
	public boolean containsAll(Collection c){
		for(Object o : c){
			if(!objectreferences.containsKey(o)){
				boolean hasThisOne = false;
				for(InterfaceExtent i : subordinateStores){
					if(i.contains(o)){
						hasThisOne = true;
						break;
					}
				}
				if(hasThisOne == false)
					return false;
			}
		}
		return true;
	}	
}
